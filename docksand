#!/usr/bin/env bash
# Docker Sandbox Tool
# blame: Matt taylor https://github.com/matthewjosephtaylor

# There are multiple 'modules' built into this one shell script. 
# The core 'docksand' module is responsible for creating/maintaining the individual docker 'sandbox' containers
# The 'cmd-find' module creates the utility image that is responsible for crafting the 'apt-get' for the sandbox container
# The 'command-composition' module uses 'cmd-find' and is responsible for creating/maintain the 'command composition' images

#--------docksand module begin---------------

# these are the default settings and must be 'globally mutable' so they can be modified via command-line params
SANDBOX_ENTRYPOINT="/bin/bash"
#SANDBOX_WORKDIR="/sandbox"
SANDBOX_WORKDIR="${PWD}"
SANDBOX_HOSTNAME="docksand-${PWD##*/}"
BASE_IMAGE_ROOT="ubuntu:latest"
SANDBOX_IMAGE_COMMANDS=()

function sandbox_container_exists () {
	docker inspect "$(get_sandbox_name)" 2>/dev/null 1>/dev/null
}

function get_sandbox_name () {
	pwd | sed 's/^\//docksand-/g' |  tr '/' '-' | tr '[:upper:]' '[:lower:]'
}

function create_sandbox_image_tag () {
	echo "$(get_sandbox_name):$(date +'%s')"
}

function list_sandbox_images () {
	docker images "$(get_sandbox_name)"
}

function list_sandbox_container () {
	docker ps -a --filter "name=^/$(get_sandbox_name)$"
}

function get_base_image_root () {
	echo "${BASE_IMAGE_ROOT}"
}

function create_base_image () {
	(
		set -e
		local sandbox_image_tag=$(create_sandbox_image_tag)
		docker create --workdir "${SANDBOX_WORKDIR}" --entrypoint "${SANDBOX_ENTRYPOINT}" --name "tmp_sandbox_base" "$(get_base_image_root)" >/dev/null
		docker commit "tmp_sandbox_base" "${sandbox_image_tag}" >/dev/null
		docker rm "tmp_sandbox_base" >/dev/null
		echo "$sandbox_image_tag";
	)
}

function get_most_recent_sandbox_image_tag () {
	(
		local possible_latest=$(docker images $(get_sandbox_name) --format "{{.Tag}}" | sort -n |awk '/./{line=$0} END{print line}');
		if [[ "${possible_latest}" == "" ]]; then
			echo "$(create_base_image)"
		else
			echo "$(get_sandbox_name):${possible_latest}"
		fi
	)
}

function create_new_sandbox_image () {
	docker commit "$(get_sandbox_name)" "$(create_sandbox_image_tag)"
}

function get_image_workdir () {
	docker inspect --format='{{.Config.WorkingDir}}' $1
}

function create_new_sandbox_container () {
	local sandbox_image_tag=$(get_most_recent_sandbox_image_tag);
	local sandbox_workdir=$(get_image_workdir ${sandbox_image_tag})
    docker create ${DOCKER_OPTS:+"${DOCKER_OPTS}"} -it -e 'PS1="\u@docksand:\w\$"' -e "HOME=${sandbox_workdir}" --hostname="${SANDBOX_HOSTNAME}" -v "$(pwd):/${sandbox_workdir}" --name "$(get_sandbox_name)" "${sandbox_image_tag}"
}

function remove_sandbox_images () {
	local image_ids=$(docker images -q $(get_sandbox_name))
	if [[ ! -z "${image_ids}" ]]; then
		docker rmi -f $(docker images -q $(get_sandbox_name))
	fi
}

function remove_sandbox_container () {
	docker rm "$(get_sandbox_name)"
}

function start_sandbox_container () {
	docker start -i "$(get_sandbox_name)"
}

function remove_sandbox () {
	(
		set -e
		if sandbox_container_exists; then
			remove_sandbox_container >/dev/null
		fi
		remove_sandbox_images >/dev/null
	)
}

function usage_and_exit () {
	echo "Docker Sandboxing Tool"
	echo "Usage: `basename $0` \
[-b | --base repository[:tag]] \
[-c | --commands 'cmd1[:spec] cmd2[:spec] ...'] \
[-h | --help] \
[-l | --list] \
[-o | --options] \
[-rm | --remove] \
[-sh | --shell] \
[-w | --workdir] \
"
	echo "Example: `basename $0` -c 'java:8 ping:ip' "
	exit 0;
}

function list_sandbox_and_exit () {
	echo "Sandbox Images:";
	list_sandbox_images;
	echo "Sandbox Container:";
	list_sandbox_container;
	exit 0;
}

function remove_sandbox_and_exit () {
	remove_sandbox;
	exit 0;
}
#--------docksand module end---------------

#---------begin command-composition module----------
image_name () {
        echo "cmdcomp-$@"  | sed 's/[^a-zA-Z0-9_-]//g'
}

create_command_composition_image () {
    package_install_list=$(docker run --rm ubuntu-cmd-find:latest $@)
    if [ $? -ne 0 ]; then
        echo "error creating command-composition image: ${package_install_list}"
        exit 1
    fi

    docker build -t "$(image_name $@)" -<<EOF
FROM ubuntu:latest
RUN ${package_install_list}
EOF

}

#---------end command-composition module----------

#------------cmd-find module begin------------------

cmd_finder_image_exists () {
    docker inspect --type image "ubuntu-cmd-find:latest" 2>/dev/null 1>/dev/null
}

build_cmd_finder_image () {
    if cmd_finder_image_exists; then 
        return 0
    fi
    read -r -d '' cmd_fnd_plain <<'EOF'
#!/usr/bin/env bash

function join_by { local IFS="$1"; shift; echo "$*"; }

# Some:<value> | Error:<error>
candidates () {
    local -r search_term=$1
    local -r decomposed_search=(${search_term//:/ })
    local -r pkgs=($(/usr/lib/command-not-found "${decomposed_search[0]}" 2>&1 | grep '^apt install' | sed 's/^apt install //g' | grep "${decomposed_search[1]}"))
    local -r pkgs_length="${#pkgs[@]}"
    if (( pkgs_length > 1)); then
        local -r pkgs_joined=$(printf ",%s" "${pkgs[@]}")
        echo -e "Error:$(echo ${search_term} | base64):<many-packages-found>:${pkgs_joined:1}"
    fi
    if (( pkgs_length == 0)); then
        local -r pa=($(/usr/lib/command-not-found --ignore-installed "${decomposed_search[0]}" 2>&1 | grep 'Command .* is available in'))
        local -r pa_length="${#pa[@]}"
        if (( pa_length == 0 )); then
            echo -e "Error:$(echo ${search_term} | base64):<no-packages-found>"
            exit 1
        fi
    fi
    if (( pkgs_length == 1)); then
        echo -e "Some:${pkgs[0]}"
    fi
}

halt_on_error () {
    local -r test_value=$1
    # echo "testing: ${test_value}"
    local -r decomposed=(${test_value//:/ })
    if [ "${decomposed[0]}" = "Error" ]; then
        echo "'$(echo ${decomposed[1]} | base64 -d)' ${decomposed[2]}"
        local -r possibles="${decomposed[3]}"
        local -r possibles_arr=(${possibles//,/ })
        for i in "${possibles_arr[@]}"
        do
            echo "      $i"
        done
        exit 1
    fi

}

install_package_cmd () {
    local -r some_package=$1
    local -r decomposed=(${some_package//:/ })
    if [ "${decomposed[0]}" = "Some" ]; then
        echo -e "${decomposed[1]}"
    fi

}

#---------------- Main ----------------------

# build up candidate packages
packages=()
for st in "$@"
do
    packages+=($(candidates "${st}"))
done

# check for errors in candidates
for v in "${packages[@]}"
do
    # echo "v: $v"
    halt_on_error $v
done

# grab successful candidates
successful_packages=()
for v in "${packages[@]}"
do
    # echo "v: $v"
    successful_packages+=($(install_package_cmd "${v}"))
    # install_package_cmd $v
done

# it all led to this point :)
echo "apt-get update && apt-get install -y ${successful_packages[@]}"
EOF


    local -r cmd_fnd_base64=$(echo "${cmd_fnd_plain}" | base64)


    docker build -t "ubuntu-cmd-find:latest" -<<EOF
FROM ubuntu:latest
RUN apt-get update && apt-get install -y command-not-found
RUN mkdir /app
WORKDIR /app
RUN echo "${cmd_fnd_base64}" | base64 -d > /app/cmd-find
RUN chmod 775 /app/cmd-find
ENTRYPOINT ["/app/cmd-find"]
EOF

}
#------------cmd-find module end------------------

#-------main module begin--------------
args=("$@")

for i in "${!args[@]}"; do
    case "${args[$i]}" in
    -h|--help)
	 		usage_and_exit;
            ;;
    -l|--list)
			list_sandbox_and_exit;
            ;;
    -rm|--remove)
			remove_sandbox_and_exit;
            ;;
    -sh|--shell)
			SANDBOX_ENTRYPOINT="${args[$i +1]}"
            ;;
    -w|--workdir)
			SANDBOX_WORKDIR="${args[$i +1]}"
            ;;
    -c|--commands)
			SANDBOX_IMAGE_COMMANDS=("${args[$i +1]}")
            ;;
    -b|--base)
			BASE_IMAGE_ROOT="${args[$i +1]}"
            ;;
    -o|--options)
			DOCKER_OPTS="${args[$i +1]}"
            ;;
    esac
done

if [[ $# -gt 0 ]]; then
	remove_sandbox
fi


main () {
	(
    	local -r commands_length="${#SANDBOX_IMAGE_COMMANDS[@]}"
		if (( commands_length > 0 )); then
			build_cmd_finder_image
			create_command_composition_image ${SANDBOX_IMAGE_COMMANDS[@]}
			BASE_IMAGE_ROOT="$(image_name ${SANDBOX_IMAGE_COMMANDS[@]})"
		fi


		set -e
		if sandbox_container_exists; then
			create_new_sandbox_image >/dev/null
			remove_sandbox_container >/dev/null
		fi
		create_new_sandbox_container >/dev/null
		start_sandbox_container
	)
}
#-------main module end--------------

main
